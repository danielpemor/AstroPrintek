---
interface Props {
  title: string;
  subtitle: string;
  backgroundImage?: string;
  backgroundVideo?: string;
  ctaText?: string;
  ctaLink?: string;
  secondaryCtaText?: string;
  secondaryCtaLink?: string;
}

const { 
  title, 
  subtitle, 
  backgroundImage = '/images/industrial-hero.jpg',
  backgroundVideo,
  ctaText = 'Ver Propuestas',
  ctaLink = '#services',
  secondaryCtaText = 'Contáctanos',
  secondaryCtaLink = '/contact'
} = Astro.props;
---

<section class="relative h-screen flex items-center justify-center overflow-hidden">
  <!-- Video Background -->
  {backgroundVideo && (
    <video
      class="absolute inset-0 w-full h-full object-cover"
      autoplay
      muted
      loop
      playsinline
      poster={backgroundImage}
    >
      <source src={backgroundVideo} type="video/mp4" />
      <!-- Fallback si el video no carga -->
      <div 
        class="absolute inset-0 bg-cover bg-center bg-no-repeat"
        style={`background-image: linear-gradient(rgba(15, 23, 42, 0.7), rgba(15, 23, 42, 0.7)), url(${backgroundImage})`}
      >
      </div>
    </video>
  )}

  <!-- Background Image (solo si no hay video) -->
  {!backgroundVideo && (
    <div 
      class="absolute inset-0 bg-cover bg-center bg-no-repeat"
      style={`background-image: linear-gradient(rgba(15, 23, 42, 0.7), rgba(15, 23, 42, 0.7)), url(${backgroundImage})`}
    >
    </div>
  )}

  <!-- Dark Overlay para el video (solo si hay video) -->
  {backgroundVideo && (
    <div class="absolute inset-0 bg-slate-900/70 z-5"></div>
  )}

  <!-- Content -->
  <div class="relative z-10 text-center text-white px-4 max-w-4xl mx-auto">
    <h1 class="text-5xl md:text-7xl font-heading font-bold mb-6 leading-tight">
      {title}
    </h1>
    
    <p class="text-xl md:text-2xl mb-8 font-light leading-relaxed opacity-90">
      {subtitle}
    </p>

    <div class="flex flex-col sm:flex-row gap-4 justify-center">
      <a 
        href={secondaryCtaLink}
        class="bg-primary-600 hover:bg-primary-700 text-white px-8 py-4 rounded-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
      >
        {secondaryCtaText}
      </a>
      
      <a 
        href={ctaLink}
        class="bg-transparent border-2 border-white hover:bg-white hover:text-slate-900 text-white px-8 py-4 rounded-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105"
      >
        {ctaText}
      </a>
    </div>
  </div>

  <!-- Scroll Indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 text-white animate-bounce">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
    </svg>
  </div>
</section>

<style>
  /* Configuración del video */
  video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center center;
  }
  
  /* Optimización específica para dispositivos móviles - menos zoom y posición ajustada */
  @media (max-width: 768px) {
    video {
      object-fit: cover;
      object-position: right; /* Mover hacia la izquierda */
      transform: scale(1); /* Menos zoom que antes */
    }
  }
  
  /* Para tablets */
  @media (min-width: 769px) and (max-width: 1024px) {
    video {
      object-fit: cover;
      object-position: center center;
    }
  }
</style>

<script>
// Script para manejar el video
document.addEventListener('DOMContentLoaded', function() {
  const video = document.querySelector('video');
  
  if (video) {
    // Asegurar que esté silenciado para autoplay
    video.muted = true;
    
    // Intentar reproducir
    const playPromise = video.play();
    
    if (playPromise !== undefined) {
      playPromise.then(() => {
        console.log('Video reproduciéndose automáticamente');
      }).catch(error => {
        console.log('Autoplay bloqueado:', error);
      });
    }
    
    // Reiniciar cuando termine (backup del atributo loop)
    video.addEventListener('ended', function() {
      this.currentTime = 0;
      this.play();
    });
  }
});
</script>