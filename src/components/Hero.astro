---
interface Props {
  title?: string;
  subtitle?: string;
  backgroundImage?: string;
  backgroundVideo?: string;
  ctaText?: string;
  ctaLink?: string;
  secondaryCtaText?: string;
  secondaryCtaLink?: string;
}

const { 
  title, 
  subtitle, 
  backgroundImage = '/images/industrial-hero.jpg',
  backgroundVideo,
  ctaText,
  ctaLink,
  secondaryCtaText,
  secondaryCtaLink
} = Astro.props;

// Detectar idioma SOLO desde la URL para el lado servidor
const currentPath = Astro.url.pathname;
const isEnglish = currentPath.startsWith('/en/') || currentPath === '/en';

// Traducciones por defecto si no se pasan props
const translations = {
  es: {
    title: 'Industrial & IT Sourcing',
    subtitle: 'Estrategias personalizadas para el abastecimiento industrial.',
    ctaText: 'Ver propuestas',
    ctaLink: '#services',
    secondaryCtaText: 'Contactar',
    secondaryCtaLink: '/contact'
  },
  en: {
    title: 'Industrial & IT Sourcing',
    subtitle: 'Industrial procurement specialists with 23 years of experience.',
    ctaText: 'Learn More',
    ctaLink: '#services',
    secondaryCtaText: 'Contact',
    secondaryCtaLink: '/en/contact'
  }
};

const currentLang = isEnglish ? 'en' : 'es';
const t = translations[currentLang];

// Usar props si se proporcionan, sino usar traducciones por defecto
const heroTitle = title || t.title;
const heroSubtitle = subtitle || t.subtitle;
const heroCtaText = ctaText || t.ctaText;
const heroCtaLink = ctaLink || t.ctaLink;
const heroSecondaryCtaText = secondaryCtaText || t.secondaryCtaText;
const heroSecondaryCtaLink = secondaryCtaLink || t.secondaryCtaLink;
---

<section class="relative h-screen flex items-center justify-center overflow-hidden">
  <!-- Video Background -->
  {backgroundVideo && (
    <video
      class="absolute inset-0 w-full h-full object-cover"
      autoplay
      muted
      loop
      playsinline
      poster={backgroundImage}
    >
      <source src={backgroundVideo} type="video/mp4" />
      <!-- Fallback si el video no carga -->
      <div 
        class="absolute inset-0 bg-cover bg-center bg-no-repeat"
        style={`background-image: linear-gradient(rgba(15, 23, 42, 0.7), rgba(15, 23, 42, 0.7)), url(${backgroundImage})`}
      >
      </div>
    </video>
  )}

  <!-- Background Image (solo si no hay video) -->
  {!backgroundVideo && (
    <div 
      class="absolute inset-0 bg-cover bg-center bg-no-repeat"
      style={`background-image: linear-gradient(rgba(15, 23, 42, 0.7), rgba(15, 23, 42, 0.7)), url(${backgroundImage})`}
    >
    </div>
  )}

  <!-- Dark Overlay para el video (solo si hay video) -->
  {backgroundVideo && (
    <div class="absolute inset-0 bg-slate-900/70 z-5"></div>
  )}

  <!-- Content -->
  <div class="relative z-10 text-center text-white px-4 max-w-4xl mx-auto" id="hero-content">
    <h1 class="text-5xl md:text-7xl font-heading font-bold mb-6 leading-tight" id="hero-title">
      {heroTitle}
    </h1>
    
    <p class="text-xl md:text-2xl mb-8 font-light leading-relaxed opacity-90" id="hero-subtitle">
      {heroSubtitle}
    </p>

    <div class="flex flex-col sm:flex-row gap-4 justify-center">
      <a 
        href={heroSecondaryCtaLink}
        class="bg-primary-600 hover:bg-primary-700 text-white px-8 py-4 rounded-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
        id="hero-secondary-cta"
      >
        {heroSecondaryCtaText}
      </a>
      
      <a 
        href={heroCtaLink}
        class="bg-transparent border-2 border-white hover:bg-white hover:text-slate-900 text-white px-8 py-4 rounded-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105"
        id="hero-cta"
      >
        {heroCtaText}
      </a>
    </div>
  </div>

  <!-- Scroll Indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 text-white animate-bounce">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
    </svg>
  </div>
</section>

<style>
  /* Configuración del video */
  video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center center;
  }
  
  /* Optimización específica para dispositivos móviles */
  @media (max-width: 768px) {
    video {
      object-fit: cover;
      object-position: right;
      transform: scale(1);
    }
  }
  
  /* Para tablets */
  @media (min-width: 769px) and (max-width: 1024px) {
    video {
      object-fit: cover;
      object-position: center center;
    }
  }
</style>

<script>
// Traducciones para JavaScript
const heroTranslations = {
  es: {
    title: 'Industrial & IT Sourcing',
    subtitle: 'Estrategias personalizadas para el abastecimiento industrial.',
    ctaText: 'Ver propuestas',
    ctaLink: '#services',
    secondaryCtaText: 'Contactar',
    secondaryCtaLink: '/contact'
  },
  en: {
    title: 'Industrial & IT Sourcing',
    subtitle: 'Industrial procurement specialists with 23 years of experience.',
    ctaText: 'Learn More',
    ctaLink: '#services',
    secondaryCtaText: 'Contact',
    secondaryCtaLink: '/en/contact'
  }
};

// Función de detección unificada (COMPLETA)
function detectLanguage() {
  // PRIORIDAD 1: Preferencia manual (LO MÁS IMPORTANTE)
  const manualPref = localStorage.getItem('user_preferred_lang');
  if (manualPref) {
    return manualPref;
  }
  
  // PRIORIDAD 2: URL
  const urlPath = window.location.pathname;
  if (urlPath.startsWith('/en/') || urlPath === '/en') {
    return 'en';
  }
  
  // PRIORIDAD 3: Navegador
  const browserLang = navigator.language || navigator.languages[0];
  const langCode = browserLang.split('-')[0].toLowerCase();
  return langCode === 'en' ? 'en' : 'es';
}

// Actualizar contenido del hero
function updateHeroContent() {
  const currentLang = detectLanguage();
  const t = heroTranslations[currentLang];
  
  // Actualizar textos
  const heroTitle = document.getElementById('hero-title');
  const heroSubtitle = document.getElementById('hero-subtitle');
  const heroCta = document.getElementById('hero-cta');
  const heroSecondaryCta = document.getElementById('hero-secondary-cta');
  
  if (heroTitle) heroTitle.textContent = t.title;
  if (heroSubtitle) heroSubtitle.textContent = t.subtitle;
  if (heroCta) {
    heroCta.textContent = t.ctaText;
    heroCta.href = t.ctaLink;
  }
  if (heroSecondaryCta) {
    heroSecondaryCta.textContent = t.secondaryCtaText;
    heroSecondaryCta.href = t.secondaryCtaLink;
  }
}

document.addEventListener('DOMContentLoaded', function() {
  // Actualizar contenido basado en preferencias
  updateHeroContent();
  
  // Video handling
  const video = document.querySelector('video');
  
  if (video) {
    video.muted = true;
    
    const playPromise = video.play();
    
    if (playPromise !== undefined) {
      playPromise.then(() => {
        console.log('Video reproduciéndose automáticamente');
      }).catch(error => {
        console.log('Autoplay bloqueado:', error);
      });
    }
    
    video.addEventListener('ended', function() {
      this.currentTime = 0;
      this.play();
    });
  }
});
</script>